@page "/list"

@using GoussanMedia.Domain.Models
@using Microsoft.Azure.Cosmos;

@inject ICosmosDbService _cosmosDb
@inject NavigationManager  navigation

@if (lists == null)
{
    <MudSkeleton />
    <MudSkeleton Animation="Animation.False" />
    <MudSkeleton Animation="Animation.Wave" />
}
else
{
    <MudButton @onclick="(()=> navigateToAdd())" Color="Color.Primary" Variant="Variant.Filled">
        Add New Document
    </MudButton>

    <MudTable Items="lists" Hover="true" Breakpoint="Breakpoint.Sm" Loading="_loading" LoadingProgressColor="Color.Info" Filter="new Func<ToDoList, bool>(FilterFunction1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Tasks</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Creation Date</MudTh>
            <MudTh>Last Changed</MudTh>
            <MudTh>Status</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Title">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Creation Date">@context.Created</MudTd>
            <MudTd DataLabel="Last Changed">@context.Changed</MudTd>
            @if (context.Completed)
                {
                <MudTd DataLabel="Complete">Finished</MudTd>
                }
                else
                {
                <MudTd DataLabel="Complete">Incomplete</MudTd>

                }
            <MudTd>
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                    <MudIconButton @onclick="@(() => Navigate(context.Id))" Icon="@Icons.Material.Filled.EditNote" Color="Color.Primary">
                        Save
                    </MudIconButton>
                    <MudIconButton @onclick="@(() => DeleteDoc(context.Id))" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary">
                        Delete
                    </MudIconButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

}

@code {
    private IEnumerable<ToDoList> lists;
    Container _container;
    private readonly string containerName = "ToDoList";
    private bool _loading = true;
    private string searchString1 = "";

    protected override async Task OnInitializedAsync()
    {
        _container = _cosmosDb.GetContainer(containerName);
        lists = await GetLists(_container);
        _loading = false;
    }

    protected async Task<IEnumerable<ToDoList>> GetLists(Container container)
    {
        return lists = await _cosmosDb.GetItemsAsync("SELECT * FROM c", container);
    }

    private async Task<IEnumerable<ToDoList>> DeleteDoc(string id)
    {
        _container = _cosmosDb.GetContainer(containerName);
        try
        {
            await _container.DeleteItemAsync<ToDoList>(id, new PartitionKey(id));
        }
        catch (CosmosException)
        {
        }
        return lists = await GetLists(_container);

    }

    private bool FilterFunction1(ToDoList toDoList) => FilterFunction(toDoList, searchString1);

    private bool FilterFunction(ToDoList toDoList, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (toDoList.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (toDoList.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    // Navigation events

    private void navigateToAdd()
    {
        navigation.NavigateTo("/addList");
    }
    private void Navigate(string id)
    {
        navigation.NavigateTo($"/edit/{id}");
    }
}