@page "/list"

@using GoussanMedia.Domain.Models

@inject ICosmosDbService _cosmosDb
@inject IBlobStorageService _blobService
@inject NavigationManager  navigation
@inject ILogger<List> Logger

<MudContainer>
    @if (videos == null)
    {
        <MudSkeleton />
        <MudSkeleton Animation="Animation.False" />
        <MudSkeleton Animation="Animation.Wave" />
    }
    else
    {
        <MudButton @onclick="(()=> navigateToUpload())" Color="Color.Primary" Variant="Variant.Filled">
            Upload Video
        </MudButton>

        <MudTable Items="videos" Hover="true" Breakpoint="Breakpoint.Sm" Loading="_loading" LoadingProgressColor="Color.Info" Filter="new Func<Videos, bool>(FilterFunction1)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Tasks</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Videos, object>(x => x.Id)">
                        ID
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Videos, object>(x => x.Title)">
                        Title
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Videos, object>(x => x.FileName)">
                        FileName
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Videos, object>(x => x.Size)">
                        Size
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Videos, object>(x => x.UploadDate)">
                        Creation Date
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Videos, object>(x => x.LastModified)">
                        Last Changed
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Videos, object>(x => x.Completed)">
                        Status
                    </MudTableSortLabel>
                </MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="FileName">@context.FileName</MudTd>
                <MudTd DataLabel="Size">
                    @CalcMB(context.Size) MB
                </MudTd>
                <MudTd DataLabel="Creation Date">@context.UploadDate</MudTd>
                <MudTd DataLabel="Last Changed">@context.LastModified</MudTd>
                @if (context.Completed)
                    {
                    <MudTd DataLabel="Complete">Finished</MudTd>
                    }
                    else
                    {
                    <MudTd DataLabel="Complete">Incomplete</MudTd>

                    }
                <MudTd>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudIconButton @onclick="@(() => Navigate(context.Id))" Icon="@Icons.Material.Filled.EditNote" Color="Color.Primary">
                            Save
                        </MudIconButton>
                        <MudIconButton @onclick="@(() => DeleteDoc(context.Id))" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary">
                            Delete
                        </MudIconButton>
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
</MudContainer>
@code {
    private IEnumerable<Videos> videos;
    private Container _container;
    private readonly string containerName = Config.CosmosVideos;
    private bool _loading = true;
    private string searchString1 = "";

    protected override async Task OnInitializedAsync()
    {
        _container = _cosmosDb.GetContainer(containerName);
        videos = await GetLists(_container);
        _loading = false;
    }

    private double CalcMB(long bytes)
    {
        double res = Math.Round(bytes / 1024d / 1024d, 2);
        return res;
    }

    protected async Task<IEnumerable<Videos>> GetLists(Container container)
    {
        return videos = await _cosmosDb.GetVideos(container);
    }

    private async Task<IEnumerable<Videos>> DeleteDoc(string id)
    {
        var res = _blobService.DeleteVideo(id);

        _container = _cosmosDb.GetContainer(containerName);
        try
        {
            await _container.DeleteItemAsync<Videos>(id, new PartitionKey(id));
        }
        catch (CosmosException ex)
        {
            Logger.LogError($"CosmosException: {ex.StatusCode} Error: {ex.Message}");
        }
        return videos = await GetLists(_container);
    }

    private bool FilterFunction1(Videos videos) => FilterFunction(videos, searchString1);

    private bool FilterFunction(Videos videos, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (videos.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (videos.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    // Navigation events

    private void navigateToUpload()
    {
        navigation.NavigateTo("/upload");
    }
    private void Navigate(string id)
    {
        navigation.NavigateTo($"/edit/{id}");
    }
}