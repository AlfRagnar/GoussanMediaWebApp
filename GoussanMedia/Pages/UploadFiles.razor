@page "/upload"
@using System
@using Microsoft.Extensions.Logging

@inject ILogger<UploadFiles> Logger
@inject ICosmosDbService _cosmosDb
@inject IAzMediaService _AMS

<MudContainer>
    <MudText Typo="Typo.h3">Upload Files to Azure Media Services to create an Asset that is stored in Azure Blob Storage</MudText>

    <MudText Typo="Typo.body2">@status</MudText>
    <InputFile id="fileInput112" OnChange="LoadFiles" hidden multiple />
    @if (isLoading)
    {
        <MudSkeleton />
        <MudSkeleton Animation="Animation.False" />
        <MudSkeleton Animation="Animation.Wave" />
    }
    else
    {

        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload" for="fileInput112">
            Upload your files
        </MudButton>
    }
</MudContainer>

@code {
    private List<IBrowserFile> loadedFiles = new();
    private List<Videos> videoResults = new();
    private string containerName = Config.CosmosVideos;
    //private string blobContainer = "goussanmedia";
    string status;

    private int maxAllowedFiles = 3;
    private bool isLoading = true;

    protected override void OnInitialized()
    {
        isLoading = false;
        base.OnInitialized();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        status = "";
        loadedFiles.Clear();
        long maxFileSize = 1024 * 1024 * 50;

        foreach (IBrowserFile file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                if (CheckFileType(file))
                {
                    loadedFiles.Add(file);
                    var uid = Regex.Replace(Convert.ToBase64String(Guid.NewGuid().ToByteArray()), "[/+=]", "");
                    string filenameForStorage = uid;
                    Random random = new();
                    Videos newVideo = new()
                    {
                        Id = filenameForStorage,
                        Extension = file.ContentType,
                        FileName = file.Name,
                        Size = file.Size,
                        UploadDate = DateTime.Now,
                        LastModified = file.LastModified,
                        Completed = false,
                        Title = $"New file{random.Next()}"
                    };

                    // Upload video with Azure Storage Service, the function returns a string containing the URI
                    Videos response = await _AMS.CreateAsset(file, newVideo, maxFileSize);


                    // Azure Cosmos DB Operations
                    Container container = _cosmosDb.GetContainer(containerName);
                    var res = await container.CreateItemAsync(response, new PartitionKey(response.Id));
                    status = $"Finished uploading {Math.Round(file.Size / 1024d / 1024d)} MB from {file.Name}";
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", file.Name, ex.Message);
                status = $"Internal server error: {ex}";
            }
        }
        isLoading = false;
    }

    private bool CheckFileType(IBrowserFile file)
    {
        if (file.ContentType.Contains("video"))
        {
            return true;
        }
        string[] formats = new string[] { ".mp4", ".avi", ".ogg", ".mov", ".wmv", ".webm" };
        return formats.Any(item => file.Name.EndsWith(item, StringComparison.OrdinalIgnoreCase));
    }

}