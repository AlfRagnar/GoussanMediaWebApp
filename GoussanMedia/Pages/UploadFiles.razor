@page "/upload"
@using System
@using System.IO

@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Microsoft.Azure.Cosmos;
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Specialized

@inject ILogger<UploadFiles> Logger
@inject IWebHostEnvironment Environment
@inject ICosmosDbService _cosmosDb

<h3>Upload Files to Azure Storage</h3>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private List<Videos> videoResults = new();
    private string containerName = "Videos";
    private string blobContainer = "goussanmedia";


    private int maxAllowedFiles = 3;
    private bool isLoading;
    private long maxFileSize = 1024 * 1024 * 15;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = false;
        loadedFiles.Clear();

        foreach (IBrowserFile file in e.GetMultipleFiles(maxAllowedFiles))
        {

            try
            {
                if (CheckFileType(file))
                {
                    string filenameForStorage = Guid.NewGuid().ToString();
                    loadedFiles.Add(file);

                    // Azure Storage Service

                    // Will throw an error if blob already exists, likely will not happen due to blob name being a new GUID each time
                    // Check if file got uploaded, will return error if not

                    // Azure Cosmos DB
                    Videos newVideo = new()
                    {
                        Id = filenameForStorage,
                        Extension = file.ContentType,
                        FileName = file.Name,
                        Size = file.Size,
                        UploadDate = DateTime.Now,
                        LastModified = file.LastModified
                    };

                    Container container = _cosmosDb.GetContainer(containerName);
                    await container.CreateItemAsync(newVideo, new PartitionKey(newVideo.Id));

                }

            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", file.Name, ex.Message);
            }
        }
        isLoading = false;
    }

    private bool CheckFileType(IBrowserFile file)
    {
        if (file.ContentType.Contains("video"))
        {
            return true;
        }
        string[] formats = new string[] { ".mp4", ".avi", ".ogg", ".mov", ".wmv", ".webm" };
        return formats.Any(item => file.Name.EndsWith(item, StringComparison.OrdinalIgnoreCase));
    }

}